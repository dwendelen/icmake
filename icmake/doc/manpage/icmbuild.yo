includefile(release.yo)

htmlbodyopt(text)(#27408B)
htmlbodyopt(bgcolor)(#FFFAF0)
whenhtml(mailto(Frank B. Brokken: f.b.brokken@rug.nl))

DEFINEMACRO(sop)(3)(\
    it() bf(-ARG1) ARG2 nl()ARG3\
)

DEFINEMACRO(itt)(1)(\
    it()tt(ARG1)\
)

DEFINEMACRO(itb)(1)(\
    it()bf(ARG1)nl()\
)

DEFINEMACRO(icb)(0)(bf(icmbuild))
DEFINEMACRO(Icb)(0)(bf(Icmbuild))

DELETEMACRO(tt)
DEFINEMACRO(tt)(1)(em(ARG1))

COMMENT( man-request, section, date, distribution file, general name)
manpage(icmbuild)(1)(_CurYrs_)(icmake._CurVers_.tar.gz)
        (A generic program maintenance script)

COMMENT( man-request, larger title )
manpagename(icmbuild)(A generic, easy configurable, program maintenance script)

COMMENT( all other: add after () )
manpagesynopsis()
       icb() [-h] [-c] tt(args)

manpagedescription()

The icb() script is a generic script that can be used to do program
maintenance using bf(icmake)(1). 

Icb() requires that the  file tt(icmconf) is available in the directory where
program maintenance is requested.

Icb() assumes that your sources exist in and below the current working
directory. The file tt(icmconf) in bf(icmake)(1)'s distribution provides an
example of an tt(icmconf) file that can be used by icb(). In that example
tt(icmconf) file it is assumed that bf(C++) sources are maintained, but
program maintenance for, e.g., bf(C) sources can easily be configured.

Icb()() compiles all sources in each of the subdirectories named in the file
tt(CLASSES), and then compiles all sources in the current working directory.

The compiled sources result in object modules which may be kept in a
library, against which the main-object module is linked. It is also possible
to specify additional libraries against which the program must be linked.

If a library is constructed it is kept up to date by icb(). When a source is
successfully compiled its new object module replaces the old one that is found
in the library. At that point the object files are no longer required and are
removed by icb().

manpagesection(KICK-STARTING ICMBUILD)

To use icb() do as follows:
    itemization(
    it()  Install icb() in your path;
    it() copy tt(icmconf) (and probably the file tt(CLASSES)) to your
       project's base directory (i.e., the directory in which and where below
       the project's sources are found);
    it() Modify the tt(#defines) in the file tt(icmconf) to taste;
    it() Enter the names of subdirectories containing sources on separate
       lines in the file tt(CLASSES)

       Note that the order of the classes mentioned in tt(CLASSES) em(is)
       relevant.  New class (subdirectory) names can always be added, but
       reordering the lines in the tt(CLASSES) file should be avoided. If
       reordering is necessary, then first run the command tt(icmbuild clean)
       to remove all files thus far created by icb(). Recompilation is
       necessary as the names of the object files contain class order-numbers
       for identification.  These class-order numbers prevent file-name
       collisions (e.g., two classes might use a file tt(data.cc)) and thus
       replacement of a file tt(x.o) from class tt(A) by file tt(x.o) from
       class tt(B) is prevented;
    it() Now (after configuring tt(icmconf)) simply run 
        verb(
            icmbuild -h
        )
       from the project's base directory and let the help-info tell you
       what your options are. See the next section for the modes of operation.
    )

manpageoptions()

    Icb() recognizes two options, at most one should be specified:
    itemization(
    itt(-h): Provide a short usage overview.
    itt(-c): Clear the screen (using tt(tput clear)) before starting the
       compilation process
    )

    Following the optional tt(-c)  icb()() the following arguments may be
       passed to icb():
    itemization(
    itt(clean)nl()
        clean up remnants of previous activities
    itt(library)nl()
        build the library (static and optionally the dynamic library)
    itt(program)nl()
        build the binary program
    itt(program strip)nl()
        build the stripped binary program
    itt(install program path)
        install the constructed program in the specified path (to be used
       after issuing icb() tt(program))
    itt(install static path) 
       install the constructed static library in the specified path (to be
        used after issuing icb() tt(library))
    itt(install shared path) 
       install the constructed shared library in the specified path (to be
        used after issuing icb() tt(library))
    )
    After adding a line to tt(icmconf) containing
        verb(
    #define DEFCOM "program"
        )
    icb() by default uses the argument tt(program). After adding 
        verb(
    #define DEFCOM "strip"
        )
    icb() by default uses the argument tt(strip). After adding 
        verb(
    #define DEFCOM "library"
        )
    icb() by default uses the argument tt(library).

    tt(DEFCOM) is ignored when an explicit operational mode is passed to
        icb().

manpagefiles()

    The mentioned paths are sugestive only and may be installation dependent:
    itemization(
    it() bf(/usr/share/icmake/icmconf)
        Example of a icb() configuration file;
    it() bf(/usr/share/icmake/CLASSES)
        Example of a icb() tt(CLASSES) file.
    )

manpagesection(EXAMPLES)
    
    Here is an example of the configuration file tt(icmconf) for a concrete
       program, using the library tt(libbobcat1) as an additional library:

    verbinclude(../../usr/share/icmake/icmconf)

manpageseealso()
    bf(icmake)(1), bf(icmconf)(7), bf(icmstart)(1), bf(icmstart.rc)(7)

manpagebugs()
    None reported

includefile(trailer.inc)
