.TH "icmbuild" "1" "1992\-2016" "icmake\&.9\&.00\&.00\&.tar\&.gz" "A generic program maintenance script"

.PP 
.SH "NAME"
icmbuild \- A generic, easy configurable, program maintenance script
.PP 
.SH "SYNOPSIS"
\fBicmbuild\fP [\-h] [\-c] \fIargs\fP
.PP 
.SH "DESCRIPTION"

.PP 
The \fBicmbuild\fP script is a generic script that can be used to do program
maintenance using \fBicmake\fP(1)\&. 
.PP 
\fBIcmbuild\fP requires that the  file \fIicmconf\fP is available in the directory where
program maintenance is requested\&.
.PP 
\fBIcmbuild\fP assumes that your sources exist in and below the current working
directory\&. The file \fIicmconf\fP in \fBicmake\fP(1)\(cq\&s distribution provides an
example of an \fIicmconf\fP file that can be used by \fBicmbuild\fP\&. In that example
\fIicmconf\fP file it is assumed that \fBC++\fP sources are maintained, but
program maintenance for, e\&.g\&., \fBC\fP sources can easily be configured\&.
.PP 
\fBIcmbuild\fP() compiles all sources in each of the subdirectories named in the file
\fICLASSES\fP, and then compiles all sources in the current working directory\&.
.PP 
The compiled sources result in object modules which may be kept in a
library, against which the main\-object module is linked\&. It is also possible
to specify additional libraries against which the program must be linked\&.
.PP 
If a library is constructed it is kept up to date by \fBicmbuild\fP\&. When a source is
successfully compiled its new object module replaces the old one that is found
in the library\&. At that point the object files are no longer required and are
removed by \fBicmbuild\fP\&.
.PP 
.SH "KICK\-STARTING ICMBUILD"

.PP 
To use \fBicmbuild\fP do as follows:
.IP o 
Install \fBicmbuild\fP in your path;
.IP o 
copy \fIicmconf\fP (and probably the file \fICLASSES\fP) to your
project\(cq\&s base directory (i\&.e\&., the directory in which and where below
the project\(cq\&s sources are found);
.IP o 
Modify the \fI#defines\fP in the file \fIicmconf\fP to taste;
.IP o 
Enter the names of subdirectories containing sources on separate
lines in the file \fICLASSES\fP
.IP 
Note that the order of the classes mentioned in \fICLASSES\fP \fIis\fP
relevant\&.  New class (subdirectory) names can always be added, but
reordering the lines in the \fICLASSES\fP file should be avoided\&. If
reordering is necessary, then first run the command \fIicmbuild clean\fP
to remove all files thus far created by \fBicmbuild\fP\&. Recompilation is
necessary as the names of the object files contain class order\-numbers
for identification\&.  These class\-order numbers prevent file\-name
collisions (e\&.g\&., two classes might use a file \fIdata\&.cc\fP) and thus
replacement of a file \fIx\&.o\fP from class \fIA\fP by file \fIx\&.o\fP from
class \fIB\fP is prevented;
.IP o 
Now (after configuring \fIicmconf\fP) simply run 
.nf 

            icmbuild \-h
        
.fi 
from the project\(cq\&s base directory and let the help\-info tell you
what your options are\&. See the next section for the modes of operation\&.

.PP 
.SH "OPTIONS"

.PP 
\fBIcmbuild\fP recognizes two options, at most one should be specified:
.IP o 
\fI\-h\fP: Provide a short usage overview\&.
.IP o 
\fI\-c\fP: Clear the screen (using \fItput clear\fP) before starting the
compilation process

.PP 
Following the optional \fI\-c\fP  \fBicmbuild\fP() the following arguments may be
passed to \fBicmbuild\fP:
.IP o 
\fIclean\fP
.br 
clean up remnants of previous activities
.IP o 
\fIlibrary\fP
.br 
build the library (static and optionally the dynamic library)
.IP o 
\fIprogram\fP
.br 
build the binary program
.IP o 
\fIprogram strip\fP
.br 
build the stripped binary program
.IP o 
\fIinstall program path\fP
install the constructed program in the specified path (to be used
after issuing \fBicmbuild\fP \fIprogram\fP)
.IP o 
\fIinstall static path\fP 
install the constructed static library in the specified path (to be
used after issuing \fBicmbuild\fP \fIlibrary\fP)
.IP o 
\fIinstall shared path\fP 
install the constructed shared library in the specified path (to be
used after issuing \fBicmbuild\fP \fIlibrary\fP)
After adding a line to \fIicmconf\fP containing
.nf 

    #define DEFCOM \(dq\&program\(dq\&
        
.fi 
\fBicmbuild\fP by default uses the argument \fIprogram\fP\&. After adding 
.nf 

    #define DEFCOM \(dq\&strip\(dq\&
        
.fi 
\fBicmbuild\fP by default uses the argument \fIstrip\fP\&. After adding 
.nf 

    #define DEFCOM \(dq\&library\(dq\&
        
.fi 
\fBicmbuild\fP by default uses the argument \fIlibrary\fP\&.
.PP 
\fIDEFCOM\fP is ignored when an explicit operational mode is passed to
\fBicmbuild\fP\&.
.PP 
.SH "ICM\-DEP"

.PP 
Class dependencies are handled by \fIicmake\fP\(cq\&s support program
\fIicm\-dep\fP\&. It can be called from \fIicmake\fP by passing it the option
\fI\-d\fP\&. All options and arguments following \fI\-d\fP are forwared to
\fIicm\-dep\fP\&.
.PP 
The program \fIicm\-dep\fP is automatically called by \fIicmbuild\fP to handle
class dependencies\&. Consider two classes \fIOptions\fP and \fIProcess\fP\&. If
\fIProcess\fP uses \fIOptions\fP and if precompiled header files are used, then in
addition to \fIOption\(cq\&s\fP header file, \fIProcess\(cq\&s\fP header must also be
precompiled if \fIOption\(cq\&s\fP header file changes\&. Likewise, if \fIOption\(cq\&s\fP
data organization is changed and \fIOption\fP defines inline members used by
\fIProcess\fP or \fIProcess\fP defines an \fIOption\fP data member then, in addition
to \fIOption\(cq\&s\fP sources sources \fIProcess\(cq\&s\fP sources must also be
compiled\&. For the latter case \fIicmconf\fP uses the \fIUSE_ALL\fP specification:
if a \fI`USE_ALL\(cq\&\fP file exists in a directory, then all sources of that
directory are recompiled\&. 
.PP 
The program \fIicm_dep\fP determines all such class dependencies, and will
recompile class header files of all classes depending on classes whose header
files must be recompiled\&. Furthermore, if a \fI`USE_ALL\(cq\&\fP file exists in a
directory then all sources of classes depending on that directory\(cq\&s class are
also recompiled\&. 
.PP 
\fIIcm\-dep\fP recognizes various options:
.IP o 
By default, it inspects dependencies of the classes mentioned in the
\fICLASSES\fP file (including \fIparser\fP and \fIscanner\fP classes, if used)\&. 
Option \fI\-\-classes filename\fP (or \fI\-c filename\fP) can be provided to specify
an alternate file\&.
.IP o 
By default the contents of an \fIicmconf\fP file is inspected, looking
for \fIUSE_ALL\fP and \fIPRECOMP\fP specifications\&. The option \fI\-\-icmconf file\fP
(or \fI\-i file\fP) option can be provided to specify an alternate file\&.
.IP o 
The \fIicmconf\fP file uses the \fI#define IH\fP parameter to specify the
suffix of class header files that should be precompiled, their filenames being
equal to the names of the classes mentioned in the \fICLASSES\fP
file\&. \fICLASSES\fP does not specify a top\-level directory\&. The name of the
top\-level header file to precompile can be specified using the option
\fI\-\-mainih filename\fP (or \fI\-m filename\fP) specification\&. By default this is
\fImain\&.ih\fP\&. 
.IP o 
By default precompiled header files are inspected if \fIicmconf\fP
contains a \fI#define PRECOMP\fP specification\&. If it does not, but precompiled
headers should nonetheless be inspected, the option \fI\-\-gch\fP can be
specified\&. Conversely, if precompiled headers should \fInot\fP be inspected, the
option \fI\-\-no\-gch\fP can be specified\&.
.IP o 
By default files named at the \fI#define USE_ALL\fP specification are
inspected if \fIicmconf\fP contains such a specification\&. If it
does not, but \fI`USE_ALL\(cq\&\fP files  should nonetheless be inspected, the option
\fI\-\-use\-all file\fP can be specified\&. Conversely, if such files should \fInot\fP
be inspected, the option \fI\-\-no\-use\-all\fP can be specified\&.
.IP o 
Options \fI\-\-verbose\fP (or \fI\-V\fP) can be specified to increase
\fIicm_dep\(cq\&s\fP verbosity\&. If none is specified, \fIicm_dep\fP silently performs
its duties\&. If specified once, then \fIicm_dep\fP reports to the standard output
what actions it performs; if specified twice it reports the options it
encountered; if specified three times it also reports the class
dependencies; if specified more often it reports what files it encountered and
what situations caused it to make its decisions\&.
.IP o 
Option \fI\-\-version\fP (or \fI\-v\fP) ends \fIicm_dep\fP after reporting its
version number to the standard output\&.
.IP o 
Option \fI\-\-help\fP (or \fI\-h\fP) ends \fIicm_dep\fP after writing a
summary of its usage to the standard output\&.
To start its work, \fIicm_dep\fP needs one command\-line argument:
\fIgo\fP\&. Any other argument results in \fIicm_dep\fP performing a `dry run\(cq\&: it
will perform all its duties (and verbose messages are displayed as if \fIgo\fP
had been specified), but no files (precompiled headers or \fIUSE_ALL\fP files)
will be touched or removed\&. If neither options nor arguments are specified
\fIicm_dep\fP writes its usage summary to the standard output\&.
.PP 
By default \fIicmbuild\fP calls \fIicmake \-d \-V go\fP: \fIicm_dep\fP is called to
perform its duties and to show its actions on the standard output stream\&. By
specifying a \fI#define ICM_DEP\fP parameter in the \fIicmconf\fP file this
default can be overruled (cf\&. \fBicmconf\fP(7))\&.
.PP 
.SH "FILES"

.PP 
The mentioned paths are sugestive only and may be installation dependent:
.IP o 
\fB/usr/share/icmake/icmconf\fP
Example of a \fBicmbuild\fP configuration file;
.IP o 
\fB/usr/share/icmake/CLASSES\fP
Example of a \fBicmbuild\fP \fICLASSES\fP file\&.

.PP 
.SH "EXAMPLES"

.PP 
Here is an example of the configuration file \fIicmconf\fP for a concrete
program, using the library \fIlibbobcat1\fP as an additional library:
.PP 
.nf 
    // Inspect the following #defines\&. Change them to taste\&. If you don\(cq\&t
    // need a particular option, change its value into an empty string

    // For more information about this file: \(cq\&man 7 icmconf\(cq\&

// MAINTENANCE RELATED DEFINES THAT ARE OFTEN ADAPTED:
// ===================================================

    // Uncomment to clear the screen starting the compilation
//#define CLS

    // Uncomment to construct a library\&. Optionally use another name (don\(cq\&t
    // use lib or an extension like \&.a)
//#define LIBRARY           \(dq\&modules\(dq\&

    // The source containing main():
#define MAIN                \(dq\&main\&.cc\(dq\&

    // The pattern locating sources in a directory:
#define SOURCES             \(dq\&*\&.cc\(dq\&

    //  The extension of object modules:
#define OBJ_EXT             \(dq\&\&.o\(dq\&

    // Uncomment to construct a shared library 
//#define SHARED

    // If the constructed shared library requires additional libraries then
    // specify these here\&. E\&.g\&., if a library /usr/lib/special/libspecial\&.so
    // is required then specify  \(dq\&\-L/usr/lib/special \-lspecial\(dq\& 
    // Predefined paths (e\&.g\&., /lib, /usr/lib) do not have to be specified
#define SHAREDREQ           \(dq\&\(dq\&

    // Directory to contain temporary results
#define TMP_DIR             \(dq\&tmp\(dq\&

    // Uncomment to use the ALL facility and a class dependency setup in the
    // CLASSES file\&. When a directory contains a file ALL (optionally rename
    // this filename by providing an alternative name) then all its sources
    // and all sources of all classes depending on it are also compiled\&.  
    // Class dependencies are indicated by the class name (as the first
    // word on a line) optionally followed by additional class names, which
    // are the classes directly depending on the line\(cq\&s first class name\&.
//#define USE_ALL           \(dq\&a\(dq\&

    // By default dependencies are determined by icm\-dep (via icmake \-d),
    // passing it the following options\&. If icm\-dep should not be called,
    // activate ICM_DEP as an empty string\&. Alternatively specify your own
    // icm\-dep options
//#define ICM_DEP           \(dq\&\-V go\(dq\&

    // should commands be echoed (ON) or not (OFF) ?
#define USE_ECHO            ON

    //  Use the VERSION file
#define USE_VERSION

    // When DEFCOM \(dq\&program\(dq\& is specified \(cq\&\&./icmbuild\(cq\& is shorthand for 
    // \(cq\&\&./icmbuild program\(cq\&
    // When DEFCOM \(dq\&library\(dq\& is specified \(cq\&\&./icmbuild\(cq\& is shorthand for 
    // \(cq\&\&./icmbuild library\(cq\&
    // The icmstart script may add a DEFCOM specification to this file\&.
//#define DEFCOM \(dq\&program\(dq\&
//#define DEFCOM \(dq\&library\(dq\&

// COMPILATION AND LINKING RELATED DEFINES
// =======================================

    // The compiler to use\&. Define CC instead if a C compiler should be used\&.
#define CXX            \(dq\&g++\(dq\&
//#define CC            \(dq\&gcc\(dq\&

    // The compiler options to use\&. Define CFLAGS instead if a C compiler is
    // used\&. 
    // To suppress colored error messages add option \-fdiagnostics\-color=never
    // To add debug\-code to object files add option  \-g
#define CXXFLAGS        \(dq\& \-\-std=c++14 \-Wall \-O2\(dq\&
//#define CFLAGS        \(dq\& \-Wall \-g \-O2\(dq\&

    // The extension of internal header files\&. See PRECOMP below
#define IH              \(dq\&\&.ih\(dq\&

    // Uncomment to generate precompiled headers\&. When activated internal
    // header files are precompiled when they are more recent than their 
    // precompiled versions\&. PRECOMP requires IH
//#define PRECOMP \(dq\&\-x c++\-header\(dq\&

    // Uncomment to suppress warnings about non\-existing IH files in 
    // class\-directories\&. This option is only interpreted when PRECOMP has
    // also been defined
//#define NO_PRECOMP_WARNING

    // Uncomment to relink the binary, even when no sources were changed 
//#define REFRESH


    // Options passed to the linker:
#define LDFLAGS         \(dq\&\(dq\&


// LIBRARIES REQUIRED BY THE CONSTRUCTED PROGRAM OR LIBRARY:
// =========================================================

    // any additional libraries the program may need:
#define ADD_LIBRARIES       \(dq\&\(dq\&

    // additional paths (other than the standard paths) to locate additional
    // libraries:
#define ADD_LIBRARY_PATHS   \(dq\&\(dq\&


// DEFINES RELATED TO USING A PARSER GENERATOR
// ===========================================

    // The subdirectory containing the parser\(cq\&s specification file
    // If this directive is REMOVED, then all parser\-related #defines
    // can also be removed from icmconf\&.
#define PARSER_DIR          \(dq\&\(dq\&

    // What is the program generating a parser?
#define PARSGEN             \(dq\&bisonc++\(dq\&

    // Flags to pass to PARSGEN:
#define PARSFLAGS           \(dq\&\-V\(dq\&

    // What is the top\-level (or only) grammar specification file?
#define PARSSPEC            \(dq\&grammar\(dq\&

    // Optionally use patterns to specify additional grammar specification 
    // files\&. These files are (in)directly included by PARSSPEC\&. Specify
    // patterns relative to PARSER_DIR
//#define PARSFILES           \(dq\&\(dq\&

    // The source file generated by the parser generator
#define PARSOUT             \(dq\&parse\&.cc\(dq\&


// DEFINES RELATED TO USING A SCANNER GENERATOR
// ============================================

    // The subdirectory containing the scanner\(cq\&s specification file
    // If this directive is REMOVED, then all scanner\-related #defines
    // can also be removed from icmconf\&.
#define SCANNER_DIR         \(dq\&\(dq\&  

    // What is the program generating the lexical scanner?
#define SCANGEN             \(dq\&flexc++\(dq\&

    // Flags to provide SCANGEN with:
#define SCANFLAGS           \(dq\&\(dq\&

    // Name of the lexical scanner specification file
#define SCANSPEC            \(dq\&lexer\(dq\&
    
    // Optionally use patterns to specify additional scanner specification 
    // files\&. These files are (in)directly included by SCANSPEC\&. Specify
    // patterns relative to SCANNER_DIR
//#define SCANFILES            \(dq\&\(dq\&

    // The source file generated by the lexical scanner
#define SCANOUT             \(dq\&lex\&.cc\(dq\&







.fi 

.PP 
.SH "SEE ALSO"
\fBicmake\fP(1), \fBicmconf\fP(7), \fBicmstart\fP(1), \fBicmstart\&.rc\fP(7)
.PP 
.SH "BUGS"
None reported
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
GNU General Public License (GPL)\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
