.TH "icmconf" "7" "1992\-2016" "icmake\&.8\&.01\&.00\&.tar\&.gz" "configuration file for \fBicmbuild\fP(1)"

.PP 
.SH "NAME"
icmconf \- Configuration file for the \fBicmbuild\fP(1) 
program maintenance script
.PP 
.SH "DESCRIPTION"

.PP 
The \fIicmconf\fP configuration file is used to specify and fine\-tune the
characteristics of program maintenance performed by the \fBicmbuild\fP(1) 
script\&. It can be used to activate and specify various directives that
determine how the program or library maintenance is performed\&. 
.PP 
The directives are biased towards the construction of a \fBC++\fP program, but
program maintenance for other languages (e\&.g\&., \fBC\fP) can also easily be
configured\&.
.PP 
The \fBicmbuild\fP(1) script ignores empty lines and lines whose first non\-blank
character is a hash\-mark (\fI#\fP) as well as lines whose first non\-blank
characters are two consecutive forward slashes (//)\&. Long lines can be split
over multiple lines by using a final backslash character at lines continuing
at the next line (refer to the \fBicmake\fP(1) man\-page for further details)\&.
.PP 
.SH "CLASS DEPENDENCIES"

.PP 
Traditional make\-utilities recompile all dependent sources once header files
are modified\&. When developing \fBC++\fP programs this is hardly ever requird, as
adding a new member function to a class does not require you to recompile
already existing source files\&. Recompilation \fIis\fP required when modifying
the data member organization of classes\&. 
.PP 
To handle class dependencies in a more sensible way, \fBicmake\fP(1)\(cq\&s
\fICLASSES\fP file may define dependencies among classes\&.
.PP 
By default, class\-dependencies are not interpreted\&. To activate
class\-dependencoes recognition then the line
.nf 

//#define USE_ALL             \(dq\&a\(dq\&
    
.fi 
in the \fIicmconf\fP file must be uncommented:
.nf 

#define USE_ALL             \(dq\&a\(dq\&
    
.fi 

.PP 
If a class Y depends on class X as in:
.nf 

  class Y: public X
    {
        \&.\&.\&.
    };
        
.fi 
or as in:
.nf 

    class Y 
    { 
        X d_y; 
        \&.\&.\&.
    };
        
.fi 
then the sources of class Y should be recompiled if X\(cq\&s data organization
has changed\&. In such cases Y depends on X\&. 
.PP 
Such class dependencies can be specified in the CLASSES file using the
form: 
.nf 

  y   x
    
.fi 
where x and y are the names of the directories in which the respective class
sources are found\&. If \fIicmconf\fP contains a line
.nf 

#define USE_ALL \(dq\&a\(dq\&
    
.fi 
then, after modifying X\(cq\&s data organization, do \(cq\&touch x/a\(cq\&, followed by
\(cq\&icmbuild program\(cq\&\&. Icmbuild now compiles all of x\(cq\&s sources as well as
the sources in directories (in)directly depending on x (in the example: the
sources in the y directory)\&.
.PP 
Multiple dependencies can also be specified\&. If the class organization looks
like this:
.nf 

    class Z: public Y
    {
        X d_x;
    };
        
.fi 
then Z depends on both Y and X\&. In the CLASSES file this is configured
like this:
.nf 

    z   x   y
        
.fi 
Indirect dependencies are automatically recognized\&. After changing X\(cq\&s data
organization where CLASSES contains the lines
.nf 

    x
    y   x
    z   y
        
.fi 
then \fIicmbuild\fP recompiles all source files in directories x, y and z\&.
.PP 
.SH "ICMCONF PARAMETERS"

.PP 
.IP o 
\fB#define ADD_LIBRARIES       \(dq\&\(dq\&\fP
.br 
When a program must be linked against additional libraries (other than
the name of the program\(cq\&s library itself, if specified at \fILIBRARY\fP)
then those libraries should be specified, blank space separated,
here\&. E\&.g\&., when a program is linked against \fIlibbobcat\fP then the
specification is:
.nf 

    #define ADD_LIBRARIES   \(dq\&bobcat\(dq\&
    
.fi 

.IP 
.IP o 
\fB#define ADD_LIBRARY_PATHS  \(dq\&\(dq\&\fP
.br 
When the additional libraries (specified at \fIADD_LIBRARIES\fP) are
located in non\-standard library locations (e\&.g\&., not in \fI/lib\fP and
\fI/usr/lib\fP) then these additional paths are (blank space separated)
specified here\&. Specify only the paths, not the \fI\-L\fP flags\&.
.IP 
.IP o 
\fB#define CLS\fP
.br 
The \fIclear screen\fP directive\&. If defined \fItput clear\fP is called to
clear the terminal screen before starting the compilation\&. By default
it is not defined\&.
.IP 
.IP o 
\fB#define CXX                 \(dq\&g++\(dq\&\fP
.br 
The C++ compiler to use\&. For a \fBC\fP compiler use, e\&.g\&., \fI#define CC
\(dq\&gcc\(dq\&\fP\&. Its setting is overruled by an identically named environment
variable\&.
.IP 
.IP o 
\fB#define CXXFLAGS            \(dq\&\-\-std=c++14 \-Wall \-O2\(dq\&\fP
.br 
The compiler options to use\&. The default options are shown\&. When the
\fBC\fP compiler is used, use \fI#define CFLAGS\fP rather than
\fICXXFLAGS\fP\&. Its setting is overruled by an identically named
environment variable\&.
.IP 
.IP o 
\fB#define DEFCOM  \(dq\&\&.\&.\&.\(dq\&\fP
.br 
A \fIDEFCOM\fP directive may be added to the \fIicmconf\fP file (the
\fBicmstart\fP(1) script can do this for you)\&. It may be defined as:
.nf 

    #define DEFCOM  \(dq\&program\(dq\&
        
.fi 
in which case \fIicmbuild\fP will do program maintenance\&.  It may also be
defined as:
.nf 

    #define DEFCOM  \(dq\&program strip\(dq\&
        
.fi 
in which case \fIicmbuild\fP does program maintenance, creating a
stripped binary program\&. 
.IP 
Alternatively it may also be defined as:
.nf 

    #define DEFCOM  \(dq\&library\(dq\&
       
.fi 
in which case \fIicmbuild\fP does library maintenance\&. 
.IP 
.IP o 
\fB#define IH                  \(dq\&\&.ih\(dq\&\fP
.br 
The extension used for internal header files\&. See \fI#define PRECOMP\fP
below\&. 
.IP 
.IP o 
\fB#define LDFLAGS             \(dq\&\(dq\&\fP
.br 
The linker options to use\&. By default no options are passed to the
linker\&. Its setting is overruled by an identically named environment
variable\&.
.IP 
.IP o 
\fB#define LIBRARY           \(dq\&modules\(dq\&\fP
.br 
By default this directive is not defined\&. If defined a local library is
constructed\&. When a binary program is built it will be linked against
this library rather than to the individual object modules\&. 
.IP 
If a library must be constructed (see also the \fIDEFCOM\fP directive),
then the \fILIBRARY\fP directive must specify the library\(cq\&s base name
(without the \fIlib\fP prefix and without the \fI\&.a\fP extension)\&.
.IP 
After a library has been constructed \fIicmbuild install static dir\fP
installs the static library at \fIdir\fP, while \fIicmbuild install
shared dir\fP installs the shared library (see below at \fI#define
SHARED\fP) at \fIdir\fP\&.
.IP 
.IP o 
\fB#define MAIN                \(dq\&main\&.cc\(dq\&\fP
.br 
The source file in which the \fIint main\fP function is defined\&. This
specification may be left as\-is or may completely be removed if
\fBicmbuild\fP(1) is used for library maintenance rather than program
maintenance\&.
.IP 
.IP o 
\fB#define OBJ_EXT             \(dq\&\&.o\(dq\&\fP
.br 
The extension of object modules created by the compiler\&.
.IP 
.IP o 
\fB//#define PRECOMP           \(dq\&\-x c++\-header\(dq\&\fP
.br 
When activated internal header files (see \fI#define IH\fP) are
precompiled when they are more recent than their precompiled
versions\&. They are removed again by \fIicmbuild clean\fP\&. To specify
internal header files for other languages change the \fI\-x\fP
specification accordingly\&. By default this \fI#define\fP is not active\&.
.IP 
.IP o 
\fB#define REFRESH\fP
.br 
Define \fIREFRESH\fP to relink the binary program at every \fIicmbuild
program\fP call\&. By default \fIREFRESH\fP is \fInot\fP defined\&.
.IP 
.IP o 
\fB#define SHARED\fP
.br 
This directive is only interpreted if \fILIBRARY\fP was also specified\&.
If defined a static library (extension \fI\&.a\fP) as well as a shared
library (extension \fI\&.so*\fP) is built\&. If not specified, but
\fILIBRARY\fP was specified, only the static library is built\&. By
default \fISHARED\fP is not defined\&.
.IP 
The shared library receives as its major version number \fIVERSION\fP\(cq\&s
major version number, and receives \fIVERSION\fP as its full version
number\&. E\&.g\&., if \fIVERSION\fP is defined as \fI1\&.02\&.03\fP and \fILIBRARY\fP
is defined as \fIdemo\fP then the shared library \fIlibdemo\&.so\&.1\&.02\&.03\fP
is constructed, with \fIlibdemo\&.so\&.1\fP soft\-linking to it, with
\fIlibdemo\&.so\fP in turn soft\-linking to \fIlibdemo\&.so\&.1\fP\&.
.IP 
.IP o 
\fB#define SHAREDREQ           \(dq\&\(dq\&\fP
.br 
When creating a shared library \fISHAREDREQ\fP specifies the names of
libraries and library paths that are required by the shared library\&.
E\&.g\&., if a library is found in \fI/usr/lib/special\fP, assuming that the
name of the required library is \fIlibspecial\&.so\fP, then use the
specification \fI\(dq\&\-L/usr/lib/special \-lspecial\(dq\&\fP\&.  The \fI/lib\fP and
\fI/usr/lib\fP paths are usually predefined and need not be
specified\&. This directive is only interpreted if \fISHARED\fP and
\fILIBRARY\fP were also defined\&.
.IP 
.IP o 
\fB#define SOURCES             \(dq\&*\&.cc\(dq\&\fP
.br 
The pattern to locate sources in a directory\&. The default value is
shown\&. 
.IP 
.IP o 
\fB#define TMP_DIR             \(dq\&tmp\(dq\&\fP
.br 
The directory in which intermediate results are stored\&. Relative to the
current working directory unless an absolute path is specified\&.
.IP 
.IP o 
\fB#define USE_ALL     \(dq\&a\(dq\&\fP
.br 
After defining this directive (by default it is \fInot\fP defined) a
class dependency setup defined in the CLASSES file is interpreted\&. In
this case, when a directory contains a file named at the \fIUSE_ALL\fP
directive, then all sources of that class as well as all sources of
all classes depending on it are (re)compiled\&. The program\(cq\&s root
directory is assumed to depend on all other directories\&.
.IP 
Class dependencies in CLASSES consist of the class name (as the first
word on a line) optionally followed by additional class names, which
are the classes on which the line\(cq\&s first class name depends\&. 
.IP 
Assuming that a program uses five classes \fIOne, Two, Three, Four\fP
and \fIFive\fP, whose sources are in, respectively, directories \fIone,
two, three, four\fP, and \fIfive\fP\&. If class \fIThree\fP depends on class
\fITwo\fP, which in turn depends on class \fIOne\fP, while class \fIFive\fP
depends on \fIThree\fP and \fIFour\fP, then the file \fICLASSES\fP may
reflect these dependencies as follows:
.nf 

    one
    two     one
    three   two
    four
    five three four 
       
.fi 
Afer touching (creating) the file \fItwo/a\fP (using e\&.g\&., the command
\fItouch two/a\fP) all sources of the classes \fITwo, Three\fP and \fIFive\fP
as well as all the sources in the program\(cq\&s root directory are recompiled:
\fITwo\fP is recompiled because of the existence of \fItwo/a\fP, \fIThree\fP is
recompiled because it depends on \fITwo\fP, \fIFive\fP is recompiled because it
depends on \fIThree\fP, the sources in the program\(cq\&s root directory are
recompiled because at least one directory was recompiled\&.
.IP 
Following the recompilations the \fBs\fP specified at \fI#define USE_ALL\fP are
removed\&.
.IP 
When the \fIUSE_ALL\fP directive was defined the command \fIicmbuild clean\fP also
removes any leftover \fIUSE_ALL\fP files from the program\(cq\&s direct
subdirectories\&.
.IP 
.IP o 
\fB#define USE_ECHO              ON\fP
.br 
When specified as \fION\fP (rather than \fIOFF\fP) commands executed by
\fIicmbuild\fP are echoed\&.
.IP 
.IP o 
\fB#define USE_VERSION\fP
.br 
If defined (which is the default) the file \fIVERSION\fP is read by
\fIicmconf\fP to determine the program/library\(cq\&s version, and the
project\(cq\&s release years\&.

.PP 
.SH "PARSER MAINTENANCE"

.PP 
The following directives are available in cases where  a program uses a parser
generator creating a parser class from a grammar specification:
.PP 
.IP o 
\fB#define PARSER_DIR          \(dq\&\(dq\&\fP
.br 
The subdirectory containing the parser\(cq\&s specification file\&. Leave
empty if no parser class is used and if no parser is generated\&. 
The following directives, beginning with \fIPARS\fP, are only
interpreted when \fIPARSER_DIR\fP is defined as a non\-empty string\&.
.IP 
.IP o 
\fB#define PARSFILES           \(dq\&\(dq\&\fP
.br 
If the parser specification file named at \fIPARSSPEC\fP itself includes
additional specification files, then patterns matching these
additional grammar specification files should be specified here\&. The
pattern is interpreted in the directory specified at \fIPARSER_DIR\fP
and could contain a subdirectory name (e\&.g\&. \fIspecs/*\fP)\&. When files
matching the pattern are modified then a new parser will be
created\&. By default no additional specification files are used\&.
.IP 
.IP o 
\fB#define PARSFLAGS           \(dq\&\-V\(dq\&\fP
.br 
The flags to use when calling the program specified at \fIPARSGEN\fP\&.
.IP 
.IP o 
\fB#define PARSGEN             \(dq\&bisonc++\(dq\&\fP
.br 
The name of the program generating the parser\&.
.IP 
.IP o 
\fB#define PARSOUT             \(dq\&parse\&.cc\(dq\&\fP
.br 
The name of the file generated by the parser generator (which is used
by \fIicmbuild\fP to compare the timestamps of the parser specification
\fBs\fP against)\&.
.IP 
.IP o 
\fB#define PARSSPEC            \(dq\&grammar\(dq\&\fP
.br 
The name of the parser specification file\&. This file is
expected in the directory specified at \fIPARSER_DIR\fP\&.

.PP 
.SH "SCANNER MAINTENANCE"

.PP 
The following directives are available in cases where  a program uses a scanner
generator creating a lexical scanner class from a set of regular expressions:
.PP 
.IP o 
\fB#define SCANNER_DIR         \(dq\&\(dq\&\fP
.br 
The subdirectory containing the scanner\(cq\&s specification file\&. Leave
empty if no scanner class is used and if no lexical scanner is
generated\&. The following directives, beginning with \fISCAN\fP, are only
interpreted when \fISCANNER_DIR\fP is defined as a non\-empty string\&.
.IP 
.IP o 
\fB#define SCANFILES            \(dq\&\(dq\&\fP
.br 
If the lexical scanner specification file named at \fISCANSPEC\fP itself
includes additional specification files, then patterns matching these
additional lexer specification files should be specified here\&. The
pattern is interpreted in the directory specified at \fISCANNER_DIR\fP
and could contain a subdirectory name (e\&.g\&. \fIspecs/*\fP)\&. When files
matching the pattern are modified then a new lexical scanner will be
created\&. By default no additional specification files are used\&.
.IP 
.IP o 
\fB#define SCANFLAGS           \(dq\&\(dq\&\fP
.br 
The flags to use when calling the program specified at \fISCANGEN\fP\&.
.IP 
.IP o 
\fB#define SCANGEN             \(dq\&flexc++\(dq\&\fP
.br 
The name of the program generating the lexical scanner\&.
.IP 
.IP o 
\fB#define SCANOUT             \(dq\&lex\&.cc\(dq\&\fP
.br 
The name of the file generated by the lexical scanner (which is used by
\fIicmbuild\fP to compare the timestamps of the scanner specification
\fBs\fP against)\&.
.IP 
.IP o 
\fB#define SCANSPEC            \(dq\&lexer\(dq\&\fP
.br 
The name of the lexical scanner specification file\&. This file is
expected in the directory specified at \fISCANNER_DIR\fP\&.

.PP 
.SH "FILES"
The mentioned paths are sugestive only and may be installation dependent:
.IP o 
\fB/usr/share/icmake/CLASSES\fP
.br 
Example of an \fBicmconf\fP \fICLASSES\fP file\&.
.IP o 
\fB/usr/share/icmake/icmconf\fP
.br 
Default skeleton \fBicmbuild\fP resource file\&.
.IP o 
\fB/etc/icmake\fP
.br 
Directory containing the default system\-wide \fBicmake\fP(1)
configuration files (like \fIVERSION\fP and \fIicmstart\&.rc\fP)
.IP o 
\fB$HOME/\&.icmake\fP
.br 
Optional directory containing user\-defined specifications overruling
the system\-wide definitions\&. This directory is the proper location for
a file \fIAUTHOR\fP defining the \fIAUTHOR\fP directive with the user\(cq\&s
name\&. E\&.g\&., my \fI\&.icmake/AUTHOR\fP file contains:
.IP 
.nf 
#define AUTHOR  \(dq\&Frank B\&. Brokken (f\&.b\&.brokken@rug\&.nl)\(dq\&;

.fi 

.IP 
.SH "SEE ALSO"
\fBicmake\fP(1), \fBicmbuild\fP(1), \fBicmstart\fP(1), \fBicmstart\&.rc\fP(7)\&.
.PP 
.SH "BUGS"
\fBicmbuild\fP(1) ends displaying a fatal error message if the current
working directory does not contain a file \fIicmconf\fP\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
GNU General Public License (GPL)\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
